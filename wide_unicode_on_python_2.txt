Python 2 WideUnicode class

Originally posted as an <a class="u-syndication" href="http://stackoverflow.com/a/42422325/186123">answer</a> to [this StackOverflow question](http://stackoverflow.com/questions/9934752/platform-specific-unicode-semantics-in-python-2-7):

> Ubuntu 11.10:
>
>     >>> x = u'\U0001f44d'
>     >>> len(x)
>     1
>     >>> ord(x[0])
>     128077
>
> Windows 7:
>
>     >>> x = u'\U0001f44d'
>     >>> len(x)
>     2
>     >>> ord(x[0])
>     55357
>
> My Ubuntu experience is with the default interpreter in the distribution.  For Windows 7 I downloaded and installed the recommended version linked from python.org.  I did not compile either of them myself.
>
> The nature of the difference is clear to me.  (On Ubuntu the string is a sequence of code points; on Windows 7 a sequence of UTF-16 code units.)  My questions are:
>
>  - Why am I observing this difference in behavior?  Is it due to how the interpreter is built, or a difference in dependent system libraries?
>  - Is there any way to configure the behavior of the Windows 7 interpreter to agree with the Ubuntu one, *that I can do within Eclipse PyDev* (my goal)?
>  - If I have to rebuild, are there any prebuilt Windows 7 interpreters that behave as Ubuntu above from a reliable source?
>  - Are there any workarounds to this issue besides manually counting surrogates in `unicode` strings on Windows only (blech)?
>  - Does this justify a bug report?  Is there any chance such a bug report would be addressed in 2.7?


Great question! I fell down this rabbit hole recently myself.

[@dan04's answer](http://stackoverflow.com/a/9934913/186123) inspired me to expand it into a `unicode` subclass that provides consistent indexing, slicing, and `len()` on both narrow and wide Python 2 builds:

    class WideUnicode(unicode):
      """String class with consistent indexing, slicing, len() on both narrow and wide Python."""
      def __init__(self, *args, **kwargs):
        super(WideUnicode, self).__init__(*args, **kwargs)
        # use UTF-32LE to avoid a byte order marker at the beginning of the string
        self.__utf32le = unicode(self).encode('utf-32le')
    
      def __len__(self):
        return len(self.__utf32le) / 4
    
      def __getitem__(self, key):
        length = len(self)
    
        if isinstance(key, int):
          if key >= length:
            raise IndexError()
          key = slice(key, key + 1)
    
        if key.stop is None:
          key.stop = length
    
        assert key.step is None
    
        return WideUnicode(self.__utf32le[key.start * 4:key.stop * 4]
                           .decode('utf-32le'))
    
      def __getslice__(self, i, j):
        return self.__getitem__(slice(i, j))

[Open sourced here](https://github.com/snarfed/webutil/blob/ac29df5aaaf7572223e95edc465749a62ed20641/util.py#L1261-L1323), public domain. Example usage:

    text = WideUnicode(obj.text)
    for tag in obj.tags:
      text = WideUnicode(text[:start] + tag.text + text[end:])

([Simplified from this usage.](https://github.com/snarfed/granary/commit/73073aad9fe1b9fd0aaa6688e8cf4bde409d277e#diff-30af2390b148b7d3997f2b2d3928ed96R1175))

Thanks [@dan04](http://stackoverflow.com/users/287586/dan04)!
